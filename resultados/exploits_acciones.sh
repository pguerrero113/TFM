#!/bin/bash
modelos_file="./modelos.txt"
explo_mod_dir="./exploits/modelos/"
explo_acc_dir="./exploits/acciones/"
code="code"
ext=".txt"
salida_file="salida.txt"
error_file="error.txt"
to_file="timeouts.txt"
tiempo_espera=300
# Usage ./exploits_acciones.sh > exploits_acciones_$(date +"%Y%m%d_%H%M%S").log 2>&1 &

echo "--Iniciando $0--"
# Crea el dir $esc_acc_dir si no existe
mkdir -p "$explo_acc_dir"
#Inicializa el fichero $to_file comun a todas las acciones
[ ! -e "$explo_acc_dir$to_file" ] && touch "$explo_acc_dir$to_file" || > "$explo_acc_dir$to_file"

exec 3< "$modelos_file"
while IFS='/' read -r -u 3 modelo1 modelo2; do

  if [ -n "$modelo1" ] || [ -n "$modelo2" ] && [[ ! "$modelo1" =~ ^[[:space:]]*# ]]; then

    #Procesa todos los ficheros de solo código
    for fichero_code in $explo_mod_dir*$modelo2*_$code$ext; do
      echo "Procesando fichero: [$fichero_code]"

      #Elimina el timestamp (26 primeros chars) de $fichero_code, porque la ejecución de ficheros no devuelve un resultado distinto con cada ejecución como sucede con la llamada a un modelo
      #Elimina path y extensión de $fichero_code, concatenandole un hash del contenido de $fichero_code
      loc=$explo_acc_dir"$(basename "$fichero_code" "$ext" | cut -c27-)_$(sha256sum "$fichero_code" | awk '{print $1}')"
      #Si el dir NO existe significa que la $fichero_code NO ha sido ejecutado -> lo ejecuta
      #Si el directorio existe significa que $fichero_code ya fué ejecutado y NO es tenido en cuenta
      if [ ! -d $loc ]; then
        #Crea un dir por $fichero_code y entra en él porque porque msfconsole puede generar ficheros como efectos laterales
        dir_pwd=$(pwd);  mkdir $loc
          #Crea un fichero con el contenido de $fichero_code, para que sea más fácil saber qué ejecuta
          cp $fichero_code $loc/$code$ext
          cd $loc
          comando="msfconsole -q -x 'resource $code$ext; exit' > $salida_file 2> $error_file"
          echo "Ejecutando: [$loc][$comando]"
          #Establece un timeout de $tiempo_espera segundos para $comando, guardando el error en su caso
          timeout "$tiempo_espera" bash -c "$comando"
          salida_timeout=$?
        cd $dir_pwd  #Sale al dir base
        if [ $salida_timeout -eq 124 ]; then echo "$(basename "$loc")" >> $esc_acc_dir$to_file; fi
      fi

    done
  fi

done
exec 3<&- 

echo "--Echo $0--"
